#!/usr/bin/env python3

import subprocess
import time
import statistics
import sys
import os

def ping_host(host):
    try:
        # Ping command with count and timeout set
        output = subprocess.check_output(['ping', '-c', '1', host], encoding='utf-8')
        global PING_COUNT
        PING_COUNT += 1
        for line in output.splitlines():
            if 'time=' in line:
                # Extract the time in milliseconds
                time_ms = line.split('time=')[1].split(' ')[0]
                return {"n":PING_COUNT, "time":float(time_ms), "dst":host}

    except subprocess.CalledProcessError:
        return {"n":PING_COUNT, "time":None}

def analyse(pings):
    good_pings = [p["time"] for p in pings if p["time"] is not None]
    # return f'{PING_COUNT:>4}: could not reach {host}'
    return {
        "num": len(pings),
        "min": min(good_pings),
        "max": max(good_pings),
        "avg": sum(good_pings) / len(good_pings),
        "sd": statistics.stdev(good_pings) if len(good_pings) > 1 else 0.0
    }

def format_row(ping, stats):
    return '{:>4} {:7.1f} {:7.1f} {:7.1f} {:7.1f} {:9.3f} \u001b[34m{:>}\u001b[0m' \
            .format(ping["n"],
                    ping["time"],
                    stats["min"],
                    stats["max"],
                    stats["avg"],
                    stats["sd"],
                    ping["dst"])

def write_screen(buffer, num_rows=4):
    sys.stdout.write("\033[H")

    length = len(buffer)
    # start = 1 if num_rows is None or num_rows >= num_rows else num_rows - length
    start = max(0, (length) - num_rows - 1)
    end = length+1+1 # extra +1 to account for header line

    [ sys.stdout.write(line + '\n')
     for n, line in enumerate(buffer)
     if n == 0
     or (n > start and n <= start+end) ]

    sys.stdout.flush()

def pretty_mode():
    sys.stdout.write('\033[?25l') # hide cursor
    sys.stdout.write('\033[2J') # clear screen

    pings = []
    buffer = []
    bold = '\u001b[4m'
    norm = '\u001b[0m'
    headers = f'{bold}{"n":>4} {"lat":>7} {"min":>7} {"max":>7} {"avg":>7} {"sd":>9} {"dst":>}' \
           .ljust(os.get_terminal_size().columns) + norm

    buffer.append(headers)

    while True:
        start_time = time.time()

        ping = ping_host(host)
        pings.append(ping)
        stats = analyse(pings)
        row = format_row(ping, stats)
        buffer.append(row)

        write_screen(buffer, num_rows=10)

        # stay at 1 RPS
        time_to_wait = max(1 - (time.time() - start_time), 0)
        time.sleep(time_to_wait)

def pung(host):
    global PING_COUNT
    PING_COUNT = 0
    try:
        pretty_mode()
    except KeyboardInterrupt:
        sys.stdout.write('\033[2J\033[H')
    finally:
        sys.stdout.write('\033[?25h') # reveal cursor
        sys.stdout.flush()


if __name__ == '__main__':
    args = sys.argv
    if len(args) == 1: quit()
    if "-n" in args:
        list(args).index("-n")
    host = args[1]
    print(f'{host=}')
    pung(host)

